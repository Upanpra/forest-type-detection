/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/cuda/__init__.py:145: UserWarning: 
NVIDIA A40 with CUDA capability sm_86 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 compute_37.
If you want to use the NVIDIA A40 GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
Running script with arguments: Namespace(input_channels=45, input_size=[16, 16], modality='hyper', num_classes=3, test_folder=['/mmfs1/gscratch/stf/upanpra/AK_paper_data/16crops/hardwood_vs_softwood/vis/test', '/mmfs1/gscratch/stf/upanpra/AK_paper_data/16crops/hardwood_vs_softwood/chm/test'], train_folder=['/mmfs1/gscratch/stf/upanpra/AK_paper_data/16crops/hardwood_vs_softwood/vis/train', '/mmfs1/gscratch/stf/upanpra/AK_paper_data/16crops/hardwood_vs_softwood/chm/train'])
tensor([ 1.2413e-03,  1.3992e+00,  1.5666e-01,  2.4665e-03,  3.7055e-03,
         2.8208e-01,  2.4620e-01,  1.1281e-02,  5.7995e+07,  3.3269e-01,
         1.0076e+00,  1.0347e+03,  1.0074e+03,  1.0008e+03,  4.0351e+00,
         2.8078e+00,  1.4801e+00,  6.4264e-01,  1.7263e+00,  1.6173e+03,
         7.6670e-01,  3.2386e-01,  2.9248e+00,  4.8894e+00,  1.6173e+03,
         7.6670e-01,  6.7660e-01, -2.4590e-02,  1.6352e-01,  6.7651e-01,
        -6.2282e-02,  1.1902e+00,  6.5222e-01,  4.6292e-02,  6.9664e+00,
         6.5256e-01,  3.7723e-01,  6.9674e+02,  8.9830e-01,  7.0955e-01,
         1.0268e+00,  6.1569e+04,  9.7964e-01,  1.4239e+00,  2.2436e+00])
tensor([4.2835e-04, 4.0767e-01, 6.8023e-02, 1.5014e-03, 1.7588e-03, 4.3323e-02,
        4.0901e-02, 2.5345e-03, 2.5077e+07, 2.5095e-01, 2.5432e-01, 2.0523e+02,
        1.9951e+02, 2.0219e+02, 5.4792e-01, 3.3658e-01, 1.8284e-01, 8.7965e-02,
        4.7020e-01, 3.2467e+02, 4.8012e-02, 3.8059e-02, 5.3951e-01, 9.9058e-01,
        3.2467e+02, 4.8012e-02, 4.9931e-02, 3.5875e-02, 6.8917e-02, 4.9927e-02,
        1.4947e-02, 1.0155e-01, 4.8966e-02, 1.9410e-02, 1.3976e+00, 1.7419e-01,
        3.9700e-02, 9.5890e+00, 5.9467e-02, 9.4901e-02, 3.9157e-01, 1.2540e+04,
        2.3095e-01, 7.1845e-02, 1.7827e+00])
Saving model to: /mmfs1/gscratch/stf/upanpra/model_checkpointsAK/best-test-model-Visconv_next_model-1700275029.3042297.pt
shape of mean, torch.Size([45])
shape of std, torch.Size([45])
ConvNeXt(
  (features): Sequential(
    (0): Conv2dNormActivation(
      (0): Conv2d(45, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LayerNorm2d((128,), eps=1e-06, elementwise_affine=True)
    )
    (1): Dropout(p=0.0, inplace=False)
    (2): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (1): Dropout(p=0.0, inplace=False)
          (2): Permute()
          (3): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (4): Linear(in_features=128, out_features=512, bias=True)
          (5): GELU()
          (6): Linear(in_features=512, out_features=128, bias=True)
          (7): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
      (1): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (1): Dropout(p=0.0, inplace=False)
          (2): Permute()
          (3): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (4): Linear(in_features=128, out_features=512, bias=True)
          (5): GELU()
          (6): Linear(in_features=512, out_features=128, bias=True)
          (7): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
      (2): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (1): Dropout(p=0.0, inplace=False)
          (2): Permute()
          (3): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (4): Linear(in_features=128, out_features=512, bias=True)
          (5): GELU()
          (6): Linear(in_features=512, out_features=128, bias=True)
          (7): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
    )
    (3): Sequential(
      (0): LayerNorm2d((128,), eps=1e-06, elementwise_affine=True)
      (1): Conv2d(128, 192, kernel_size=(2, 2), stride=(2, 2))
    )
    (4): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
          (1): Dropout(p=0.0, inplace=False)
          (2): Permute()
          (3): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
          (4): Linear(in_features=192, out_features=768, bias=True)
          (5): GELU()
          (6): Linear(in_features=768, out_features=192, bias=True)
          (7): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (final_dropout): Dropout(p=0.0, inplace=False)
  (classifier): Sequential(
    (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
    (1): Flatten(start_dim=1, end_dim=-1)
    (2): Linear(in_features=192, out_features=3, bias=True)
  )
)
28337917.156469163
Traceback (most recent call last):
  File "/mmfs1/gscratch/stf/upanpra/AK_train_scripts/train_script_parameterized.py", line 151, in <module>
    main()
  File "/mmfs1/gscratch/stf/upanpra/AK_train_scripts/train_script_parameterized.py", line 123, in main
    net, train_history, test_history = trainCNN(net, train_loader, test_loader,
  File "/mmfs1/gscratch/stf/upanpra/src/trainer.py", line 40, in trainCNN
    outputs = net(images)               # Forward pass: compute the output class given a image
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/gscratch/stf/upanpra/src/convnext.py", line 181, in forward
    return self._forward_impl(x)
  File "/mmfs1/gscratch/stf/upanpra/src/convnext.py", line 174, in _forward_impl
    x = self.features(x)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/gscratch/stf/upanpra/src/convnext.py", line 57, in forward
    result = self.layer_scale * self.block(input)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 447, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/mmfs1/home/upanpra/miniconda3/envs/deeplearningCuda/lib/python3.8/site-packages/torch/nn/modules/conv.py", line 443, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
RuntimeError: Unable to find a valid cuDNN algorithm to run convolution
